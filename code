/*
-----------------------------------------------------------------------------------
Created with the assistance of ChatGPT, an AI model based on the GPT-4 architecture.
Date: [2023-10-4]

Description:
This Arduino program is designed to control the rotation of a servo motor based 
on the readings from a light sensor. If the reading from the sensor falls below 
a certain threshold, the servo rotates. The servo completes a set number of rotations
in one direction, pauses, and then rotates in the opposite direction. It will stop
either after a defined number of rotations or if the light exceeds the threshold.

GPT Details:
- Architecture: GPT-4
- ChatGPT Version Date: January 2022

Prompt Used:
"The rotation of the servo motor is controlled according to the light level, and it reverses when the light level is lower than 900 or when it ends. 
Comment all code. Also create a header comment that contains a brief description 
of the code, the GPT architecture, the exact ChatGPT version date, and the prompt used."

-----------------------------------------------------------------------------------
*/

// Include the Servo library for servo motor control
#include <Servo.h>

// Declare an instance of the Servo class to control the servo motor
Servo cntServo1;

// Pin number where the servo motor is connected
int spin1 = 2;

// Pin number where the light sensor is connected
int lightSensorPin_1 = A0;

// Variable to hold the current reading from the light sensor
int lightSensorVal_1;

// Threshold value for the light sensor. Servo rotates if the reading goes below this value
int lightSensorThreshold_1 = 900;

// Counter to keep track of the number of rotations made by the servo motor
unsigned long rotationCount = 0;

// Timestamp to remember the last moment the servo made a rotation
unsigned long lastRotationTime = 0;

// Duration (in milliseconds) that each rotation of the servo motor should take
const unsigned long rotationTime = 1000;

// Flag to determine if the servo has already paused after the first 45 rotations
bool hasPaused = false;

// Initialization function executed once when the program starts
void setup() {
  // Initialize the serial communication at 9600 baud rate for debugging purposes
  Serial.begin(9600);

  // Link the servo motor to its associated pin
  cntServo1.attach(spin1);
}

// Main loop that continually executes
void loop() {
  // Read the current value from the light sensor
  lightSensorVal_1 = analogRead(lightSensorPin_1);

  // Check if the current light sensor reading is below the preset threshold
  if (lightSensorVal_1 < lightSensorThreshold_1) {

    // If the servo hasn't rotated 45 times yet, make it rotate clockwise
    if (rotationCount < 45) {
      cntServo1.write(0);
      // After the defined duration, increase the rotation count
      if (millis() - lastRotationTime >= rotationTime) {
        rotationCount++;
        lastRotationTime = millis();
      }
    }
    // If the servo has completed 45 rotations and hasn't paused yet, pause it
    else if (rotationCount == 45 && !hasPaused) {
      cntServo1.write(92);
      delay(1500);
      hasPaused = true;
    }
    // After the pause, make the servo rotate counter-clockwise until 90 rotations are complete
    else if (rotationCount >= 45 && rotationCount < 90) {
      cntServo1.write(180);
      if (millis() - lastRotationTime >= rotationTime) {
        rotationCount++;
        lastRotationTime = millis();
      }
    }
    // After 90 rotations are complete, stop the servo, reset counters and flags for next cycle
    else if (rotationCount >= 90) {
      cntServo1.write(92);
      delay(5000);
      rotationCount = 0;
      hasPaused = false;
    }
  }
  // If the light reading exceeds the threshold, stop the servo
  else {
    cntServo1.write(92);
  }

  // Print the current light sensor reading to the serial monitor for monitoring and debugging
  Serial.println(lightSensorVal_1);
}
